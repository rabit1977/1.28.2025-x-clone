// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id      String      @id 
  email   String   @unique
  username    String @unique
  displayName String?
  bio String?
  location String?
  job String?
  website String?
  img String?
  cover String?

  posts   Post[]
  likes Like[]
  savedPosts SavedPosts[]
  followers Follow[] @relation("UserFollowers")
  followings Follow[] @relation("UserFollowings")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  description     String? @db.VarChar(255)
  img String?
  video String?
  isSensitive Boolean @default(false)

  user    User     @relation(fields: [userId], references: [id])
  userId  String


  rePostId Int?
  rePost Post? @relation("RePosts", fields: [rePostId], references: [id])
  rePosts Post[] @relation("RePosts")
 
 parentPostId Int?
 parentPost Post? @relation("PostComments", fields: [parentPostId], references: [id])
 comments Post[] @relation("PostComments")
likes Like[]
savedPosts SavedPosts[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  userId  String

  post    Post     @relation(fields: [postId], references: [id])
  postId  Int

}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  userId  String

  post    Post     @relation(fields: [postId], references: [id])
  postId  Int
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  followerId  String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])

  followingId  String
  following    User     @relation("UserFollowings", fields: [followingId], references: [id])
}